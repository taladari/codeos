name: CI/CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - uses: pnpm/action-setup@v4
      
      # Install native dependencies for keytar
      - name: Install native dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsecret-1-dev
          
      - run: pnpm i
      - run: pnpm -w lint
      - run: pnpm -w build
      - run: pnpm -r exec vitest --run

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
      - uses: pnpm/action-setup@v4
      - run: pnpm i
      - run: pnpm -w build
      
      # Get version from tag
      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      # Publish core and providers packages first
      - name: Publish core package
        run: cd packages/core && npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Publish providers package  
        run: cd packages/providers && npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      # Resolve workspace dependencies and publish CLI
      - name: Resolve workspace dependencies and publish CLI
        run: |
          cd packages/cli
          
          # Replace workspace dependencies with actual versions
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            
            if (pkg.dependencies['codeos-core'] === 'workspace:*') {
              pkg.dependencies['codeos-core'] = '^${{ steps.version.outputs.version }}';
            }
            if (pkg.dependencies['codeos-providers'] === 'workspace:*') {
              pkg.dependencies['codeos-providers'] = '^${{ steps.version.outputs.version }}';
            }
            
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          "
          
          # Publish the CLI package
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
